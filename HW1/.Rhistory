getwd()
getwd()
install.packages("reticulate")
library(reticulate)
py_config()
Y
py_config()
Y
sample(x = 0:1, size = 10, prob = [0.5, 0.5])
sample(x = 0:1, size = 10, prob = c(0.5, 0.5))
sample(x = 0:1, size = 10, prob = c(0.5, 0.5), replace = TRUE)
rbinom(n = 0:1, size = 10, prob = 0.5)
rbinom(n = c(0,1), size = 10, prob = 0.5)
rbinom(n = 10, size = 1, prob = 0.5)
rbinom(n = 10, size = 1, prob = 0.3)
rbinom(n = 1, size = 1, prob = 0.3)
rbinom(n = 1, size = 6, prob = 0.5)
rbinom(n = 1, size = 6, prob = 0.5)
rbinom(n = 6, size = 1, prob = 0.5)
rbinom(n = 6, size = 1:6, prob = 0.5)
rbinom(n = 6, size = 1:6, prob = 1/6)
rbinom(n = 6, size = 10, prob = 1/6)
rbinom(n = 10, size = 10, prob = 1/6)
rbinom(n = 10, size = 1, prob = 0.5)
dbinom(n = 10, size = 1, prob = 0.5)
dbinom(x = 10, size = 1, prob = 0.5)
rbinom(x = 10, size = 1, prob = 0.5)
rbinom(n = 10, size = 1, prob = 0.5)
dbinom(x = 6, size = 10, prob = 0.5)
pbinom(q = 7, size = 10, prob = 0.5)
1 - pbinom(q = 4, size = 10, prob = 0.5)
punif(q = 1:7, min = 1, max = 10)
dunif(x = 1:7, min = 1, max = 10)
punif(q = 7, min = 1, max = 10)
punif(q = 6, min = 1, max = 10)
rnorm(n = 100, mean = 0, sd = 1)
#Question 5
library(zoo)
set.seed(360)
#a)
data_a=rnorm(502,0,2)
mov_avg_data_a = rollmean(x = data_a, k = 3)
acf_a = acf(mov_avg_data_a,lag.max=20)
acf_a
acf_actual = acf(data_a, lag.max = 20)
acf_actual
df <- data.frame(c(data_a, mov_avg_data_a))
View(df)
df <- data.frame(data_a, mov_avg_data_a)
acf_a
acf_actual
acf_a = acf(mov_avg_data_a,lag.max=20)
acf_actual = acf(data_a, lag.max = 20)
acf_a = acf(mov_avg_data_a,lag.max=20)
#b)
data_b=rnorm(52,0,2)
mov_avg_data_b = rollmean(x = data_b, k = 3)
acf_b = acf(mov_avg_data_b,lag.max=20)
acf_b
#Question 5
library(zoo)
set.seed(360)
#a)
data_a=rnorm(502,0,2)
mov_avg_data_a = rollmean(x = data_a, k = 3)
acf_a = acf(mov_avg_data_a,lag.max=20)
#b)
data_b=rnorm(52,0,2)
mov_avg_data_b = rollmean(x = data_b, k = 3)
acf_b = acf(mov_avg_data_b,lag.max=20)
#a)
data_a=rnorm(502,0,2)
mov_avg_data_a = rollmean(x = data_a, k = 3)
acf_a = acf(mov_avg_data_a,lag.max=20)
acf_actual = acf(data_a, lag.max = 20)
devtools::install_github("RamiKrispin/coronavirus")
devtools::install_github("RamiKrispin/coronavirus")
library(coronavirus)
library(dplyr)
library(dplyr)
install.packages("dplyr")
library(dplyr)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(dplyr)
library(ggplot2)
library(tidyr)
data("coronavirus")
library(coronavirus)
library(dplyr)
library(ggplot2)
library(tidyr)
data("coronavirus")
force(coronavirus)
View(coronavirus)
coronavirus %>% filter(Country.Region == "Turkey")
coronavirus %>% filter(Country.Region == "Turkey") %>%
glipmse()
coronavirus %>% filter(Country.Region == "Turkey") %>%
glimpse()
summary(coronavirus %>% filter(Country.Region == "Turkey"))
coronavirus %>% filter(Country.Region == "China") %>%
group_by(type) %>%
summarise(cases = sum(cases))
china = coronavirus %>% filter(Country.Region == "China") %>%
group_by(type) %>%
summarise(cases = sum(cases)) %>%
mutate(Death = death / confirmed)
china = coronavirus %>% filter(Country.Region == "China") %>%
group_by(type) %>%
summarise(cases = sum(cases))
View(china)
china = coronavirus %>% filter(Country.Region == "China") %>%
group_by(type) %>%
summarise(cases = sum(cases)) %>%
mutate(Ratio = cases / max(cases))
View(china)
coronavirus %>% filter(Country.Region == "Italy") %>%
group_by(type) %>%
summarise(cases = sum(cases)) %>%
mutate(Ratio = cases / max(cases))
coronavirus %>% (type) %>%
summarise(cases = sum(cases)) %>%
mutate(Ratio = cases / max(cases))
coronavirus %>% group_by(type) %>%
summarise(cases = sum(cases)) %>%
mutate(Ratio = cases / max(cases))
coronavirus %>% group_by(type, Country.Region) %>%
summarise(cases = sum(cases)) %>%
mutate(Ratio = cases / max(cases))
coronavirus %>% group_by(type, Country.Region) %>%
summarise(cases = sum(cases))
df <- coronavirus %>% group_by(type, Country.Region) %>%
summarise(cases = sum(cases))
View(df)
df <- coronavirus %>% group_by(type, Country.Region) %>%
summarise(cases = sum(cases)) %>%
pivot_longer(cols=c(type, cases), names_to = "Property", values_to = "Case")
df <- coronavirus %>% group_by(type, Country.Region) %>%
summarise(cases = sum(cases)) %>%
pivot_longer(cols=c(type, cases), names_to = "Property", values_to = "Case")
df <- coronavirus %>% group_by(type, Country.Region) %>%
summarise(cases = sum(cases))
View(df)
df <- coronavirus %>% group_by(type, Country.Region) %>%
summarise(cases = sum(cases)) %>%
ungroup() %>%
pivot_longer(cols=c(type, cases), names_to = "Property", values_to = "Case")
df <- coronavirus %>% group_by(type, Country.Region) %>%
summarise(cases = sum(cases)) %>%
ungroup()
View(df)
df <- coronavirus %>% group_by(type, Country.Region) %>%
summarise(cases = sum(cases)) %>%
ungroup() %>%
spread(key = type, value = cases)
View(df)
View(df)
df <- coronavirus %>% group_by(type, Country.Region) %>%
summarise(cases = sum(cases)) %>%
ungroup() %>%
spread(key = type, value = cases) %>%
mutate(active = confirmed - (death + recovered))
View(df)
df <- coronavirus %>% group_by(type, Country.Region) %>%
summarise(cases = sum(cases)) %>%
ungroup() %>%
spread(key = type, value = cases) %>%
mutate(active = confirmed - (death + recovered)) %>%
mutate(death_ratio = death / confirmed, recover_ratio = recovered / confirmed,
active_ratio = active / confirmed)
View(df)
df <- coronavirus %>% group_by(type, Country.Region) %>%
summarise(cases = sum(cases)) %>%
ungroup() %>%
spread(key = type, value = cases) %>%
mutate(active = confirmed - (death + recovered)) %>%
mutate(death_ratio = death / confirmed * 100,
recover_ratio = recovered / confirmed * 100,
active_ratio = active / confirmed * 100)
View(df)
arrange(desc(death_ratio))
df <- coronavirus %>% group_by(type, Country.Region) %>%
summarise(cases = sum(cases)) %>%
ungroup() %>%
spread(key = type, value = cases) %>%
mutate(active = confirmed - (death + recovered)) %>%
mutate(death_ratio = death / confirmed * 100,
recover_ratio = recovered / confirmed * 100,
active_ratio = active / confirmed * 100) %>%
arrange(desc(death_ratio))
View(df)
df <- coronavirus %>% group_by(type, Country.Region) %>%
summarise(cases = sum(cases)) %>%
ungroup() %>%
spread(key = type, value = cases) %>%
mutate(active = confirmed - (death + recovered)) %>%
mutate(death_ratio = death / confirmed * 100,
recover_ratio = recovered / confirmed * 100,
active_ratio = active / confirmed * 100) %>%
filter(confirmed>100) %>%
arrange(desc(death_ratio))
View(df)
# instaling the packages
library(tidyr)
library(dplyr)
library(ggplot2)
install.packages('dslabs')
library(dslabs)
data("gapminder")
force(gapminder)
force(oecd)
force(opec)
head(gapminder)
class(gapminder)
library(tidyverse)
head(gapminder)
# first nesting
nested <- gapminder %>%
group_by(country) %>%
nest()
head(nested)
head(gapminder)
head(nested)
length(nested)
lapply(length, nested)
nrow(nested)
nested$data[[185]]
nested$country[185]
nested$country[[185]]
# these tibbles can be accessed by
nested$data[[13]]
# to simplify - unnest()
nested %>%
unnest(data)
nested$data[[country=='Algeria']]
nested$data[[nested$country=='Algeria']]
# instaling the packages
library(tidyr)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(broom)
# package for the data
library(dslabs)
# requiring the data
data("gapminder")
head(gapminder)
# first nesting to create nested data frames for each country
# this process creates a new list column named 'data'
nested <- gapminder %>%
group_by(country) %>%
nest()
# these tibbles can be accessed by
nested$data[[13]]
# to simplify - unnest()
nested %>%
unnest(data)
# some operations
mean(nested$data[[1]]$population, na.rm = TRUE)
# to find the means for each country
map(.x = nested$data, .f = ~mean(.x$population, na.rm = TRUE))
# can also add this as a column to tibbles
pop_df <- nested %>%
mutate(pop_mean = map(.x = data, .f = ~mean(.x$population, na.rm = TRUE))) # this returns a list
pop_df$pop_mean[[4]]
# we have to specify that column
pop_df %>%
unnest(pop_mean)
# can also add models too with map()
model_df <- nested %>%
mutate(models = map(.x = data, .f = ~lm(formula = population ~ fertility, data = .x)))
albania_model = model_df$models[[1]]
summary(albania_model)
tidy(albania_model)
# glance() returns one row summary about metrics
glance(albania_model)
# augment() returns the data and the prediction together
augment(albania_model)
# attempt to plot
augment(albania_model) %>%
ggplot(mapping = aes(x = year)) +
geom_point(mapping = aes(y = fertility)) +
geom_line(mapping = aes(y = .fitted), color='red')
# can also add models too with map()
model_df <- nested %>%
mutate(models = map(.x = data, .f = ~lm(formula = population ~ fertility + year, data = .x)))
albania_model = model_df$models[[1]]
summary(albania_model)
# tidy() returns a data frame of coefficients and some statistics
tidy(albania_model)
# glance() returns one row summary about metrics
glance(albania_model)
# augment() returns the data and the prediction together - .fitted column is the forecast
augment(albania_model)
# attempt to plot
augment(albania_model) %>%
ggplot(mapping = aes(x = year)) +
geom_point(mapping = aes(y = fertility)) +
geom_line(mapping = aes(y = .fitted), color='red')
# can also add models too with map()
model_df <- nested %>%
mutate(models = map(.x = data, .f = ~lm(formula = population ~ life_expectancy + year, data = .x)))
albania_model = model_df$models[[1]]
summary(albania_model)
# tidy() returns a data frame of coefficients and some statistics
tidy(albania_model)
# glance() returns one row summary about metrics
glance(albania_model)
# augment() returns the data and the prediction together - .fitted column is the forecast
augment(albania_model)
# attempt to plot
augment(albania_model) %>%
ggplot(mapping = aes(x = year)) +
geom_point(mapping = aes(y = population)) +
geom_line(mapping = aes(y = .fitted), color='red')
View(model_df)
model_coef_nested <- model_df %>%
mutate(coef = map(models, ~tidy(.x))) %>%
unnest(coef)
View(model_coef_nested)
View(model_df)
# adding performances all together
model_perf_nested <- model_df %>%
mutate(fit = mpa(models, ~glance(.x))) %>%
unnest(fit)
# adding performances all together
model_perf_nested <- model_df %>%
mutate(fit = map(models, ~glance(.x))) %>%
unnest(fit)
head(model_perf_nested)
model_perf_nested %>% arrange(desc(r.squared))
setwd("/Users/bardi/Documents/GitHub/spring20-barandogru/HW1")
# including the required packages
library(readxl)
library(dplyr)
library(ggplot2)
library(lubridate)
library(xts)
# The data that will be used consists of the following:
# 1. Total credit/debit card expenditure amount (Thousand TRY)
# 2. Total credit/debit card number of transactions ()
# 3. USD/TRY exchange rate ()
# 4. Consumer price index of Turkey ()
# The main goal is to examine the behaviour of the total credit/debit card expenditure amount.
# To do that we will be be using number of transactions, usd currency and consumer price index.
# The questions that we are looking to find the answers for are as follows:
# 1. Is there a positive correlation between the amount spent and number of transactions?
# 2. How does amount spent per a transaction changed over time?
# 3. What is the relationship between currency rate and total amount spent? Correlation?
# 4. Is there a relationship between consumer price index and total amount spent converted to USD?
# reading the data (the data used belongs to Central Bank of the Republic of Turkey)
total_expenditure <- read_xlsx('totalcardexpenditure.xlsx')
num_transactions <- read_xlsx('totalnumoftransactions.xlsx')
usd_try <- read_xlsx('usdcurrency.xlsx')
turkey_cpi <- read_xlsx('turkeycpi.xlsx')
# tidying up the data respectively
total_expenditure <- total_expenditure %>%
rename(Date = 'Tarih', Amount = 'TP KKHARTUT KT1') %>%
filter(!is.na(Date) & !is.na(Amount))
total_expenditure$Date <- as.Date(total_expenditure$Date, format='%d-%m-%Y')
num_transactions <- num_transactions %>%
rename(Date = 'Tarih', Number = 'TP KKISLADE KA1') %>%
select(Date, Number) %>%
filter(!is.na(Date) & !is.na(Number)) %>%
slice(1:319)
num_transactions$Date <- as.Date(num_transactions$Date, format='%d-%m-%Y')
num_transactions$Number <- as.numeric(num_transactions$Number)
usd_try <- usd_try %>%
rename(Date = 'Tarih', Currency = 'TP DK USD A YTL') %>%
select(Date, Currency) %>%
slice(2:2299) %>%
mutate(USDTRY = na.locf(Currency)) %>%
select(Date, USDTRY)
usd_try$Date <- as.Date(usd_try$Date, format='%d-%m-%Y')
turkey_cpi <- turkey_cpi %>%
rename(Date = 'Tarih', CPI = 'TP FG J0') %>%
select(Date, CPI) %>%
slice(1:75)
turkey_cpi$Date <- as.yearmon(turkey_cpi$Date, format='%Y-%m')
turkey_cpi$CPI <- as.numeric(turkey_cpi$CPI)
# # creating xts objects respectively
# expenditure_xts <- xts(select(total_expenditure, Amount), order.by = total_expenditure$Date)
# transaction_xts <- xts(select(num_transactions, Number), order.by = num_transactions$Date)
# cpi_xts <- xts(select(turkey_cpi, CPI), order.by = turkey_cpi$Date)
# usdtry_xts <- xts(select(usd_try, USDTRY), order.by = usd_try$Date)
# Number of transactions vs total flow amount
amount_with_transactions <- merge(total_expenditure, num_transactions, by = 'Date')
amount_with_transactions <- amount_with_transactions %>%
mutate(Amount_Per_Transaction = Amount * 1000 / Number)
amount_vs_transactions <- amount_with_transactions %>%
gather(key = 'Type', value = 'Transaction', c(Amount, Number)) %>%
select(-Amount_Per_Transaction) %>%
arrange(Date)
ggplot(amount_vs_transactions, aes(x = Date)) +
theme_minimal() +
geom_line(aes(y = Transaction, color = Type)) +
scale_x_date(breaks = '6 months', date_labels = '%b %Y') +
theme(axis.text.x = element_text(angle=45)) +
labs(x = 'Date', y = 'Total Expenditure (1000 TL)',
title = 'Total Expenditure Amount vs # of Transactions')
ggplot(amount_with_transactions, aes(x = Date)) +
theme_minimal() +
geom_line(aes(y = Amount_Per_Transaction)) +
scale_x_date(breaks = '6 months', date_labels = '%b %Y') +
theme(axis.text.x = element_text(angle=45)) +
labs(x = 'Date', y = 'Expenditure (TL)',
title = 'Average Expenditure Amount per Transaction')
cor(amount_with_transactions$Amount, amount_with_transactions$Number)
# Total amount spent vs cpi
total_expenditure_monthly <- total_expenditure %>%
mutate(Month = month(Date), Year = year(Date)) %>%
group_by(Year, Month) %>%
summarise(Avg_Expen = mean(Amount)) %>%
ungroup()
total_expenditure_monthly <- total_expenditure_monthly %>%
mutate(Date = as.yearmon(paste(total_expenditure_monthly$Year, '-',
total_expenditure_monthly$Month),
format='%Y-%m')) %>%
select(c(Date, Avg_Expen))
setwd("/Users/bardi/Documents/GitHub/spring20-barandogru/HW1")
# including the required packages
library(readxl)
library(dplyr)
library(ggplot2)
library(lubridate)
library(xts)
# The data that will be used consists of the following:
# 1. Total credit/debit card expenditure amount (Thousand TRY)
# 2. Total credit/debit card number of transactions ()
# 3. USD/TRY exchange rate ()
# 4. Consumer price index of Turkey ()
# The main goal is to examine the behaviour of the total credit/debit card expenditure amount.
# To do that we will be be using number of transactions, usd currency and consumer price index.
# The questions that we are looking to find the answers for are as follows:
# 1. Is there a positive correlation between the amount spent and number of transactions?
# 2. How does amount spent per a transaction changed over time?
# 3. What is the relationship between currency rate and total amount spent? Correlation?
# 4. Is there a relationship between consumer price index and total amount spent converted to USD?
# reading the data (the data used belongs to Central Bank of the Republic of Turkey)
total_expenditure <- read_xlsx('totalcardexpenditure.xlsx')
num_transactions <- read_xlsx('totalnumoftransactions.xlsx')
usd_try <- read_xlsx('usdcurrency.xlsx')
turkey_cpi <- read_xlsx('turkeycpi.xlsx')
# tidying up the data respectively
total_expenditure <- total_expenditure %>%
rename(Date = 'Tarih', Amount = 'TP KKHARTUT KT1') %>%
filter(!is.na(Date) & !is.na(Amount))
total_expenditure$Date <- as.Date(total_expenditure$Date, format='%d-%m-%Y')
num_transactions <- num_transactions %>%
rename(Date = 'Tarih', Number = 'TP KKISLADE KA1') %>%
select(Date, Number) %>%
filter(!is.na(Date) & !is.na(Number)) %>%
slice(1:319)
num_transactions$Date <- as.Date(num_transactions$Date, format='%d-%m-%Y')
num_transactions$Number <- as.numeric(num_transactions$Number)
usd_try <- usd_try %>%
rename(Date = 'Tarih', Currency = 'TP DK USD A YTL') %>%
select(Date, Currency) %>%
slice(2:2299) %>%
mutate(USDTRY = na.locf(Currency)) %>%
select(Date, USDTRY)
usd_try$Date <- as.Date(usd_try$Date, format='%d-%m-%Y')
turkey_cpi <- turkey_cpi %>%
rename(Date = 'Tarih', CPI = 'TP FG J0') %>%
select(Date, CPI) %>%
slice(1:75)
turkey_cpi$Date <- as.yearmon(turkey_cpi$Date, format='%Y-%m')
turkey_cpi$CPI <- as.numeric(turkey_cpi$CPI)
# # creating xts objects respectively
# expenditure_xts <- xts(select(total_expenditure, Amount), order.by = total_expenditure$Date)
# transaction_xts <- xts(select(num_transactions, Number), order.by = num_transactions$Date)
# cpi_xts <- xts(select(turkey_cpi, CPI), order.by = turkey_cpi$Date)
# usdtry_xts <- xts(select(usd_try, USDTRY), order.by = usd_try$Date)
# Number of transactions vs total flow amount
amount_with_transactions <- merge(total_expenditure, num_transactions, by = 'Date')
amount_with_transactions <- amount_with_transactions %>%
mutate(Amount_Per_Transaction = Amount * 1000 / Number)
amount_vs_transactions <- amount_with_transactions %>%
gather(key = 'Type', value = 'Transaction', c(Amount, Number)) %>%
select(-Amount_Per_Transaction) %>%
arrange(Date)
ggplot(amount_vs_transactions, aes(x = Date)) +
theme_minimal() +
geom_line(aes(y = Transaction, color = Type)) +
scale_x_date(breaks = '6 months', date_labels = '%b %Y') +
theme(axis.text.x = element_text(angle=45)) +
labs(x = 'Date', y = 'Total Expenditure (1000 TL)',
title = 'Total Expenditure Amount vs # of Transactions')
ggplot(amount_with_transactions, aes(x = Date)) +
theme_minimal() +
geom_line(aes(y = Amount_Per_Transaction)) +
scale_x_date(breaks = '6 months', date_labels = '%b %Y') +
theme(axis.text.x = element_text(angle=45)) +
labs(x = 'Date', y = 'Expenditure (TL)',
title = 'Average Expenditure Amount per Transaction')
cor(amount_with_transactions$Amount, amount_with_transactions$Number)
# Total amount spent vs cpi
total_expenditure_monthly <- total_expenditure %>%
mutate(Month = month(Date), Year = year(Date)) %>%
group_by(Year, Month) %>%
summarise(Avg_Expen = mean(Amount)) %>%
ungroup()
total_expenditure_monthly <- total_expenditure_monthly %>%
mutate(Date = as.yearmon(paste(total_expenditure_monthly$Year, '-',
total_expenditure_monthly$Month),
format='%Y-%m')) %>%
select(c(Date, Avg_Expen))
View(total_expenditure)
View(num_transactions)
View(turkey_cpi)
